// Generated by llvm2cpp - DO NOT MODIFY!

//#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("tmp.bc", getGlobalContext());
 mod->setDataLayout("0xec9710");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 
 // Function Declarations
 
 Function* func__Z3tmpv = mod->getFunction("_Z3tmpv");
 if (!func__Z3tmpv) {
 func__Z3tmpv = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z3tmpv", mod); 
 func__Z3tmpv->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z3tmpv_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z3tmpv_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z3tmpv->setAttributes(func__Z3tmpv_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_2 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_3 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: _Z3tmpv (func__Z3tmpv)
 {
  
  BasicBlock* label_5 = BasicBlock::Create(mod->getContext(), "",func__Z3tmpv,0);
  BasicBlock* label_6 = BasicBlock::Create(mod->getContext(), "",func__Z3tmpv,0);
  BasicBlock* label_7 = BasicBlock::Create(mod->getContext(), "",func__Z3tmpv,0);
  BasicBlock* label_8 = BasicBlock::Create(mod->getContext(), "",func__Z3tmpv,0);
  BasicBlock* label_9 = BasicBlock::Create(mod->getContext(), "",func__Z3tmpv,0);
  
  // Block  (label_5)
  AllocaInst* ptr_x = new AllocaInst(IntegerType::get(mod->getContext(), 32), "x", label_5);
  ptr_x->setAlignment(4);
  AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_5);
  ptr_i->setAlignment(4);
  StoreInst* void_10 = new StoreInst(const_int32_3, ptr_i, false, label_5);
  void_10->setAlignment(4);
  BranchInst::Create(label_6, label_5);
  
  // Block  (label_6)
  LoadInst* int32_12 = new LoadInst(ptr_i, "", false, label_6);
  int32_12->setAlignment(4);
  ICmpInst* int1_13 = new ICmpInst(*label_6, ICmpInst::ICMP_SLT, int32_12, const_int32_4, "");
  BranchInst::Create(label_7, label_9, int1_13, label_6);
  
  // Block  (label_7)
  LoadInst* int32_15 = new LoadInst(ptr_i, "", false, label_7);
  int32_15->setAlignment(4);
  StoreInst* void_16 = new StoreInst(int32_15, ptr_x, false, label_7);
  void_16->setAlignment(4);
  BranchInst::Create(label_8, label_7);
  
  // Block  (label_8)
  LoadInst* int32_18 = new LoadInst(ptr_i, "", false, label_8);
  int32_18->setAlignment(4);
  BinaryOperator* int32_19 = BinaryOperator::Create(Instruction::Add, int32_18, const_int32_2, "", label_8);
  StoreInst* void_20 = new StoreInst(int32_19, ptr_i, false, label_8);
  void_20->setAlignment(4);
  BranchInst::Create(label_6, label_8);
  
  // Block  (label_9)
  ReturnInst::Create(mod->getContext(), const_int32_3, label_9);
  
 }
 
 return mod;
}
